# -*- coding: utf-8 -*-
"""Flask_aluguer_imoveis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D50-mXNvTvJWAtUOULfViqFOIe5D64Aa
"""

#!pip install pyngrok flask
#!pip install folium
#!pip install gspread
#!ngrok authtoken 2xaXwGP2RC9L0F4Ejti15YRP4Io_7msuBBpvFpd7o71Hpyk7t

from flask import Flask, request, render_template_string, redirect, url_for
# from pyngrok import ngrok
import gspread
import pandas as pd
from google.auth import default
import folium

# Autenticação Google
import gspread
import os
import json
from google.oauth2.service_account import Credentials

# Define o escopo
scopes = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']

# Cria as credenciais
service_account_info = json.loads(os.environ['GOOGLE_CREDENTIALS'])
credentials = Credentials.from_service_account_info(service_account_info, scopes=scopes)

# Autentica o gspread
client = gspread.authorize(credentials)


SHEET_ID = "1c0iF-CUNAgAHKCxIOGEPIJqtYTE96I6KZGAmzEIVzr8"  
sh = client.open_by_key(SHEET_ID)



df_imoveis = pd.DataFrame(sh.worksheet("Imoveis").get_all_records())
df_clientes = pd.DataFrame(sh.worksheet("Clientes").get_all_records())
df_reservas = pd.DataFrame(sh.worksheet("Reservas").get_all_records())

# Flask
app = Flask(__name__)
port = 5000
#public_url = ngrok.connect(port)
#print(f"Aplicação a rodar em: {public_url}")

SENHA_PRIVADA = "1234"

# Função para gerar o mapa
def gerar_mapa():
    mapa = folium.Map(location=[38.7169, -9.1399], zoom_start=6, width='80%', height='400px')
    for _, row in df_imoveis.iterrows():
        try:
            lat = float(row["Latitude"])
            lon = float(row["Longitude"])
            popup = f"{row['Descrição']}<br>{row['Preço/Noite (€)']}€/noite"
            folium.Marker([lat, lon], popup=popup).add_to(mapa)
        except:
            continue
    return mapa._repr_html_()


TEMPLATE_BASE = """
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <title>{{ titulo }}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        .table th, .table td {
            text-align: center;
            vertical-align: middle;
        }
        body {
            margin: 20px;
        }
        .nav-buttons {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>{{ titulo }}</h1>
        <div class="nav-buttons">
            {% if titulo != "Área Privada - Login" %}
                <a class="btn btn-primary" href="/">Início</a>
            {% endif %}
            {% if titulo == "Imóveis Disponíveis" %}
                <a class="btn btn-secondary" href="/login">Área Privada</a>
            {% endif %}
        </div>
        <hr>
        {{ conteudo|safe }}
    </div>
</body>
</html>
"""



@app.route("/")
def home():
    mapa_html = gerar_mapa()
    tabela_html = df_imoveis[["Localização", "Preço/Noite (€)", "Descrição"]].to_html(classes='table table-bordered table-hover', index=False, border=0)
    conteudo = f"""
    <div id="map">{mapa_html}</div>
    <div class="tabela-wrapper">
        <h2>Lista de Imóveis</h2>
        {tabela_html}
    </div>
    """
    return render_template_string(TEMPLATE_BASE, titulo="Imóveis Disponíveis", conteudo=conteudo)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        senha = request.form.get("senha")
        if senha == SENHA_PRIVADA:
            return redirect(url_for("privado"))
        else:
            return render_template_string(TEMPLATE_BASE, titulo="Login", conteudo="<p>Senha incorreta!</p>")
    conteudo = """
    <form method="POST" class="mt-4">
        <input type="password" name="senha" class="form-control mb-2" placeholder="Digite a senha">
        <button type="submit" class="btn btn-primary">Entrar</button>
    </form>
    """
    return render_template_string(TEMPLATE_BASE, titulo="Login - Área Privada", conteudo=conteudo)

@app.route("/privado", methods=["GET", "POST"])
def privado():
    df_filtrado = df_imoveis.copy()
    local = request.form.get("local")
    preco_min = request.form.get("preco_min")
    preco_max = request.form.get("preco_max")

    if request.method == "POST":
        if local:
            df_filtrado = df_filtrado[df_filtrado["Localização"].str.contains(local, case=False)]
        if preco_min:
            df_filtrado = df_filtrado[df_filtrado["Preço/Noite (€)"] >= float(preco_min)]
        if preco_max:
            df_filtrado = df_filtrado[df_filtrado["Preço/Noite (€)"] <= float(preco_max)]

    filtros_html = """
    <form method="POST" class="row g-3 mb-4">
        <div class="col-md-4">
            <input type="text" name="local" class="form-control" placeholder="Filtrar por Localização">
        </div>
        <div class="col-md-3">
            <input type="number" step="0.01" name="preco_min" class="form-control" placeholder="Preço Mínimo">
        </div>
        <div class="col-md-3">
            <input type="number" step="0.01" name="preco_max" class="form-control" placeholder="Preço Máximo">
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary w-100">Filtrar</button>
        </div>
    </form>
    """

    tabela_clientes = df_clientes.to_html(classes='table table-striped', index=False)
    tabela_reservas = df_reservas.to_html(classes='table table-striped', index=False)
    tabela_imoveis = df_filtrado.to_html(classes='table table-striped', index=False)

    conteudo = f"""
    <h1>Área Privada</h1>
    {filtros_html}
    <h2>Clientes</h2>
    {tabela_clientes}
    <h2>Reservas</h2>
    {tabela_reservas}
    <h2>Imóveis - Detalhes</h2>
    {tabela_imoveis}
    """
    return render_template_string(TEMPLATE_BASE, titulo="Área Privada", conteudo=conteudo)


#app.run(port=port)
import os

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))  # Usa a porta do Render ou 10000 por padrão
    app.run(host="0.0.0.0", port=port)

